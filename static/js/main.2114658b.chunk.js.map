{"version":3,"sources":["components/todoButtons.jsx","components/todoItem.jsx","components/todoBody.jsx","components/todoForm.jsx","components/todoApp.jsx","index.js"],"names":["StyledButton","styled","button","ButtonWrapper","div","TodoButtons","props","onClick","onShowMarked","onShowUnMarked","onShowAll","Item","StyledInput","input","StyledSpan","span","DeleteButton","TodoItem","name","text","type","id","checked","complete","value","onChange","toggleComplete","htmlFor","style","textDecoration","onDeleteTask","TodoBodyContainer","TodoBody","useState","tasksToDisplay","updateTaskToDisplay","newtasks","tasks","filter","task","map","deleteTask","StyledForm","form","AddButton","TodoForm","setText","handleSubmit","event","preventDefault","onSubmit","parseInt","Date","now","placeholder","target","aria-label","role","TodoHeadingWrapper","TodoMain","TodoApp","setTask","useEffect","data","JSON","parse","localStorage","getItem","setItem","stringify","wrapper","document","getElementById","render"],"mappings":"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","file":"static/js/main.2114658b.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledButton = styled.button`\r\n  border: 4px solid black;\r\n  padding: 8px;\r\n  outline: none;\r\n  transition: all 200ms ease;\r\n  &:hover {\r\n    background-color: #bbb;\r\n    transform: translateY(2px);\r\n  }\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default function TodoButtons(props) {\r\n  return (\r\n    <ButtonWrapper>\r\n      <StyledButton onClick={props.onShowMarked}>Marked TODOs</StyledButton>\r\n      <StyledButton onClick={props.onShowUnMarked}>Unmarked TODOs</StyledButton>\r\n      <StyledButton onClick={props.onShowAll}>All TODOs</StyledButton>\r\n    </ButtonWrapper>\r\n  );\r\n}\r\n\r\nTodoButtons.propTypes = {\r\n  onShowMarked: propTypes.func,\r\n  onShowUnMarked: propTypes.func,\r\n  onShowAll: propTypes.func,\r\n};\r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Item = styled.div`\r\n  display: block;\r\n  padding: 8px;\r\n  border-bottom: 2px solid black;\r\n  margin: 8px 0;\r\n  width: inherit;\r\n  height: 24px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  line-height: 1.2;\r\n  margin-right: 4px;\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  min-width: 380px;\r\n  padding: 8px 4px;\r\n  text-transform: uppercase;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst DeleteButton = styled.button`\r\n  color: white;\r\n  float: right;\r\n  background-color: #e41d1d;\r\n  outline: none;\r\n  border: none;\r\n  padding: 4px 8px;\r\n  margin-right: 8px;\r\n  transition: all 200ms ease;\r\n  &:hover {\r\n    background-color: #ff0000;\r\n    transform: translateY(2px);\r\n  }\r\n`;\r\n\r\nexport default function TodoItem(props) {\r\n  return (\r\n    <Item>\r\n      <StyledInput\r\n        name={props.text}\r\n        type=\"checkbox\"\r\n        id={props.id}\r\n        checked={props.complete}\r\n        value={props.text}\r\n        onChange={props.toggleComplete}\r\n      />\r\n      <label htmlFor={props.id}>\r\n        <StyledSpan\r\n          style={{\r\n            textDecoration: props.complete ? 'line-through' : 'none',\r\n          }}\r\n        >\r\n          {props.text}\r\n        </StyledSpan>\r\n      </label>\r\n      <DeleteButton onClick={props.onDeleteTask}> X </DeleteButton>\r\n    </Item>\r\n  );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  id: propTypes.number,\r\n  text: propTypes.string,\r\n  complete: propTypes.bool,\r\n  toggleComplete: propTypes.func,\r\n  onDeleteTask: propTypes.func,\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\n\r\nimport TodoButtons from './todoButtons.jsx';\r\nimport TodoItem from './todoItem';\r\nimport propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoBodyContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  border: 4px double black;\r\n  max-height: 300px;\r\n  min-height: 335px;\r\n  overflow: hidden;\r\n  overflow-y: scroll;\r\n\r\n  /* width */\r\n  &::-webkit-scrollbar {\r\n    width: 8px;\r\n  }\r\n  /* Track */\r\n  &::-webkit-scrollbar-track {\r\n    // background: #03045e;\r\n  }\r\n  /* Handle */\r\n  &::-webkit-scrollbar-thumb {\r\n    background: black;\r\n    border-radius: 8px;\r\n  }\r\n  /* Handle on hover */\r\n  &::-webkit-scrollbar-thumb:hover {\r\n    background: grey;\r\n  }\r\n`;\r\n\r\nexport default function TodoBody(props) {\r\n  const [tasksToDisplay, updateTaskToDisplay] = useState('all');\r\n\r\n  let newtasks = props.tasks;\r\n\r\n  const showMarked = () => {\r\n    newtasks = props.tasks.filter((task) => task.complete);\r\n  };\r\n\r\n  const showUnMarked = () => {\r\n    newtasks = props.tasks.filter((task) => !task.complete);\r\n  };\r\n\r\n  if (tasksToDisplay === 'marked') {\r\n    showMarked();\r\n  } else if (tasksToDisplay === 'unmarked') {\r\n    showUnMarked();\r\n  } else {\r\n    newtasks = props.tasks;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <TodoButtons\r\n        onShowMarked={() => updateTaskToDisplay('marked')}\r\n        onShowUnMarked={() => updateTaskToDisplay('unmarked')}\r\n        onShowAll={() => updateTaskToDisplay('all')}\r\n      />\r\n      <TodoBodyContainer>\r\n        {newtasks.map((task) => (\r\n          <TodoItem\r\n            key={task.id}\r\n            id={task.id}\r\n            complete={task.complete}\r\n            toggleComplete={() => props.toggleComplete(task.id)}\r\n            text={task.text}\r\n            onDeleteTask={() => props.deleteTask(task.id)}\r\n          />\r\n        ))}\r\n      </TodoBodyContainer>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nTodoBody.propTypes = {\r\n  tasks: propTypes.array,\r\n  toggleComplete: propTypes.func,\r\n  deleteTask: propTypes.func,\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledForm = styled.form`\r\n  margin: 0;\r\n  border: 4px double black;\r\n  padding: 16px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  width: 300px;\r\n  padding: 10px;\r\n  outline: none;\r\n  border: 2px solid black;\r\n`;\r\n\r\nconst AddButton = styled.button`\r\n  float: right;\r\n  width: 50px;\r\n  border: 2px solid black;\r\n  padding: 8px;\r\n  outline: none;\r\n  &:hover {\r\n    background-color: #bbb;\r\n    transform: translateY(2px);\r\n  }\r\n`;\r\n\r\nexport default function TodoForm(props) {\r\n  const [text, setText] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    [event.target.name] = event.target.value;\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (text !== '') {\r\n      props.onSubmit({\r\n        id: parseInt(Date.now() % 10000, 10),\r\n        text: text,\r\n        complete: false,\r\n      });\r\n      setText('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={handleSubmit}>\r\n      <StyledInput\r\n        name=\"text\"\r\n        placeholder=\"Enter Task\"\r\n        value={text}\r\n        onChange={handleChange}\r\n      />\r\n      <AddButton onClick={handleSubmit}>\r\n        <span aria-label=\"add\" role=\"img\">\r\n          ➕\r\n        </span>\r\n      </AddButton>\r\n    </StyledForm>\r\n  );\r\n}\r\n\r\nTodoForm.propTypes = {\r\n  onSubmit: propTypes.func,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport TodoBody from \"./todoBody.jsx\";\r\nimport TodoForm from \"./todoForm.jsx\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TodoHeadingWrapper = styled.div`\r\n  display: grid;\r\n  place-items: center;\r\n`;\r\n\r\nconst TodoMain = styled.div`\r\n  display: block;\r\n  min-width: 420px;\r\n  height: 600px;\r\n`;\r\n\r\nexport default function TodoApp() {\r\n  const [tasks, setTask] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const data = JSON.parse(localStorage.getItem(\"todo-app-data\"));\r\n    if (data) {\r\n      setTask(data);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todo-app-data\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const addTodo = (task) => {\r\n    setTask([...tasks, task]);\r\n  };\r\n\r\n  const toggleComplete = (id) => {\r\n    setTask(\r\n      tasks.map((task) => {\r\n        if (task.id === id) {\r\n          return {\r\n            ...task,\r\n            complete: !task.complete,\r\n          };\r\n        } else {\r\n          return task;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    setTask(tasks.filter((tasks) => tasks.id !== id));\r\n  };\r\n\r\n  return (\r\n    <TodoMain>\r\n      <TodoHeadingWrapper>\r\n        <h1>\r\n          <span aria-label=\"note\" role=\"img\">\r\n            📝\r\n          </span>{\" \"}\r\n          TO DO APP\r\n        </h1>\r\n      </TodoHeadingWrapper>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <TodoBody\r\n        tasks={tasks}\r\n        toggleComplete={toggleComplete}\r\n        deleteTask={deleteTask}\r\n      />\r\n    </TodoMain>\r\n  );\r\n}\r\n","import './styles.css';\r\n\r\nimport React from 'react';\r\nimport TodoApp from './components/todoApp.jsx';\r\nimport { render } from 'react-dom';\r\n\r\nconst wrapper = document.getElementById('main');\r\nrender(<TodoApp />, wrapper);\r\n"],"sourceRoot":""}