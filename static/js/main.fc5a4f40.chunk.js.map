{"version":3,"sources":["components/todoButtons.jsx","components/todoItem.jsx","components/todoBody.jsx","components/todoForm.jsx","components/todoApp.jsx","index.js"],"names":["StyledButton","styled","button","ButtonWrapper","div","TodoButtons","onShowAll","onShowMarked","onShowUnMarked","onClick","Item","StyledInput","input","StyledSpan","span","DeleteButton","TodoItem","id","text","complete","toggleComplete","onDeleteTask","name","type","checked","value","onChange","htmlFor","style","textDecoration","TodoBodyContainer","TodoBody","tasks","deleteTask","useState","tasksToDisplay","updateTaskToDisplay","newtasks","filter","task","map","StyledForm","form","AddButton","TodoForm","onSubmit","setText","handleSubmit","event","preventDefault","parseInt","Date","now","placeholder","target","aria-label","role","TodoHeadingWrapper","TodoMain","TodoApp","setTask","useEffect","data","JSON","parse","localStorage","getItem","setItem","stringify","wrapper","document","getElementById","render"],"mappings":"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","file":"static/js/main.fc5a4f40.chunk.js","sourcesContent":["import propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledButton = styled.button`\r\n  border: 4px solid black;\r\n  padding: 8px;\r\n  outline: none;\r\n  transition: all 200ms ease;\r\n  &:hover {\r\n    background-color: #bbb;\r\n    transform: translateY(2px);\r\n  }\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst TodoButtons = ({ onShowAll, onShowMarked, onShowUnMarked }) => (\r\n  <ButtonWrapper>\r\n    <StyledButton onClick={onShowMarked}>Marked TODOs</StyledButton>\r\n    <StyledButton onClick={onShowUnMarked}>Unmarked TODOs</StyledButton>\r\n    <StyledButton onClick={onShowAll}>All TODOs</StyledButton>\r\n  </ButtonWrapper>\r\n);\r\n\r\nexport default TodoButtons;\r\n\r\nTodoButtons.propTypes = {\r\n  onShowMarked: propTypes.func,\r\n  onShowUnMarked: propTypes.func,\r\n  onShowAll: propTypes.func,\r\n};\r\n","import propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Item = styled.div`\r\n  display: block;\r\n  padding: 8px;\r\n  border-bottom: 2px solid black;\r\n  margin: 8px 0;\r\n  width: inherit;\r\n  height: 24px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  line-height: 1.2;\r\n  margin-right: 4px;\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  min-width: 380px;\r\n  padding: 8px 4px;\r\n  text-transform: uppercase;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst DeleteButton = styled.button`\r\n  color: white;\r\n  float: right;\r\n  background-color: #e41d1d;\r\n  outline: none;\r\n  border: none;\r\n  padding: 4px 8px;\r\n  margin-right: 8px;\r\n  transition: all 200ms ease;\r\n  &:hover {\r\n    background-color: #ff0000;\r\n    transform: translateY(2px);\r\n  }\r\n`;\r\n\r\nconst TodoItem = ({ id, text, complete, toggleComplete, onDeleteTask }) => (\r\n  <Item>\r\n    <StyledInput\r\n      name={text}\r\n      type=\"checkbox\"\r\n      id={id}\r\n      checked={complete}\r\n      value={text}\r\n      onChange={toggleComplete}\r\n    />\r\n    <label htmlFor={id}>\r\n      <StyledSpan\r\n        style={{\r\n          textDecoration: complete ? 'line-through' : 'none',\r\n        }}\r\n      >\r\n        {text}\r\n      </StyledSpan>\r\n    </label>\r\n    <DeleteButton onClick={onDeleteTask}> X </DeleteButton>\r\n  </Item>\r\n);\r\n\r\nexport default TodoItem;\r\n\r\nTodoItem.propTypes = {\r\n  id: propTypes.number,\r\n  text: propTypes.string,\r\n  complete: propTypes.bool,\r\n  toggleComplete: propTypes.func,\r\n  onDeleteTask: propTypes.func,\r\n};\r\n","import { Fragment, useState } from 'react';\r\n\r\nimport TodoButtons from './todoButtons.jsx';\r\nimport TodoItem from './todoItem';\r\nimport propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoBodyContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  border: 4px double black;\r\n  max-height: 300px;\r\n  min-height: 335px;\r\n  overflow: hidden;\r\n  overflow-y: scroll;\r\n\r\n  /* width */\r\n  &::-webkit-scrollbar {\r\n    width: 8px;\r\n  }\r\n  /* Track */\r\n  &::-webkit-scrollbar-track {\r\n    // background: #03045e;\r\n  }\r\n  /* Handle */\r\n  &::-webkit-scrollbar-thumb {\r\n    background: black;\r\n    border-radius: 8px;\r\n  }\r\n  /* Handle on hover */\r\n  &::-webkit-scrollbar-thumb:hover {\r\n    background: grey;\r\n  }\r\n`;\r\n\r\nconst TodoBody = ({ tasks, toggleComplete, deleteTask }) => {\r\n  const [tasksToDisplay, updateTaskToDisplay] = useState('all');\r\n\r\n  let newtasks = tasks;\r\n\r\n  const showMarked = () => {\r\n    newtasks = tasks.filter((task) => task.complete);\r\n  };\r\n\r\n  const showUnMarked = () => {\r\n    newtasks = tasks.filter((task) => !task.complete);\r\n  };\r\n\r\n  if (tasksToDisplay === 'marked') {\r\n    showMarked();\r\n  } else if (tasksToDisplay === 'unmarked') {\r\n    showUnMarked();\r\n  } else {\r\n    newtasks = tasks;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <TodoButtons\r\n        onShowMarked={() => updateTaskToDisplay('marked')}\r\n        onShowUnMarked={() => updateTaskToDisplay('unmarked')}\r\n        onShowAll={() => updateTaskToDisplay('all')}\r\n      />\r\n      <TodoBodyContainer>\r\n        {newtasks.map((task) => (\r\n          <TodoItem\r\n            key={task.id}\r\n            id={task.id}\r\n            complete={task.complete}\r\n            toggleComplete={() => toggleComplete(task.id)}\r\n            text={task.text}\r\n            onDeleteTask={() => deleteTask(task.id)}\r\n          />\r\n        ))}\r\n      </TodoBodyContainer>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TodoBody;\r\n\r\nTodoBody.propTypes = {\r\n  tasks: propTypes.array,\r\n  toggleComplete: propTypes.func,\r\n  deleteTask: propTypes.func,\r\n};\r\n","import propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { useState } from 'react';\r\n\r\nconst StyledForm = styled.form`\r\n  margin: 0;\r\n  border: 4px double black;\r\n  padding: 16px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  width: 300px;\r\n  padding: 10px;\r\n  outline: none;\r\n  border: 2px solid black;\r\n`;\r\n\r\nconst AddButton = styled.button`\r\n  float: right;\r\n  width: 50px;\r\n  border: 2px solid black;\r\n  padding: 8px;\r\n  outline: none;\r\n  &:hover {\r\n    background-color: #bbb;\r\n    transform: translateY(2px);\r\n  }\r\n`;\r\n\r\nconst TodoForm = ({ onSubmit }) => {\r\n  const [text, setText] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    [event.target.name] = event.target.value;\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (text !== '') {\r\n      onSubmit({\r\n        id: parseInt(Date.now() % 10000, 10),\r\n        text: text,\r\n        complete: false,\r\n      });\r\n      setText('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={handleSubmit}>\r\n      <StyledInput\r\n        name=\"text\"\r\n        placeholder=\"Enter Task\"\r\n        value={text}\r\n        onChange={handleChange}\r\n      />\r\n      <AddButton onClick={handleSubmit}>\r\n        <span aria-label=\"add\" role=\"img\">\r\n          ➕\r\n        </span>\r\n      </AddButton>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n\r\nTodoForm.propTypes = {\r\n  onSubmit: propTypes.func,\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport TodoBody from './todoBody.jsx';\r\nimport TodoForm from './todoForm.jsx';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoHeadingWrapper = styled.div`\r\n  display: grid;\r\n  place-items: center;\r\n`;\r\n\r\nconst TodoMain = styled.div`\r\n  display: block;\r\n  min-width: 420px;\r\n  height: 600px;\r\n`;\r\n\r\nconst TodoApp = () => {\r\n  const [tasks, setTask] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const data = JSON.parse(localStorage.getItem('todo-app-data'));\r\n    if (data) {\r\n      setTask(data);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('todo-app-data', JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const addTodo = (task) => {\r\n    setTask([...tasks, task]);\r\n  };\r\n\r\n  const toggleComplete = (id) => {\r\n    setTask(\r\n      tasks.map((task) => {\r\n        if (task.id === id) {\r\n          return {\r\n            ...task,\r\n            complete: !task.complete,\r\n          };\r\n        } else {\r\n          return task;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    setTask(tasks.filter((tasks) => tasks.id !== id));\r\n  };\r\n\r\n  return (\r\n    <TodoMain>\r\n      <TodoHeadingWrapper>\r\n        <h1>\r\n          <span aria-label=\"note\" role=\"img\">\r\n            📝\r\n          </span>{' '}\r\n          TO DO APP\r\n        </h1>\r\n      </TodoHeadingWrapper>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <TodoBody\r\n        tasks={tasks}\r\n        toggleComplete={toggleComplete}\r\n        deleteTask={deleteTask}\r\n      />\r\n    </TodoMain>\r\n  );\r\n};\r\n\r\nexport default TodoApp;\r\n","import './styles.css';\r\n\r\nimport React from 'react';\r\nimport TodoApp from './components/todoApp.jsx';\r\nimport { render } from 'react-dom';\r\n\r\nconst wrapper = document.getElementById('main');\r\n\r\nrender(<TodoApp />, wrapper);\r\n"],"sourceRoot":""}